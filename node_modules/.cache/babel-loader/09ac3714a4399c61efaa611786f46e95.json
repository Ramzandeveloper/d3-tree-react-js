{"ast":null,"code":"import _toConsumableArray from \"/Users/ramzandeveloper/Desktop/Repos/OtherRepos/treeReactJs/reactD3/d3-tree-react-example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/ramzandeveloper/Desktop/Repos/OtherRepos/treeReactJs/reactD3/d3-tree-react-example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/ramzandeveloper/Desktop/Repos/OtherRepos/treeReactJs/reactD3/d3-tree-react-example/src/Tree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Tree from \"react-d3-tree\";\nimport axios from \"axios\";\nimport defaultArray from './convertedArray';\nimport Box from '@mui/material/Box';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport './custom-tree.css';\nimport CircleIcon from '@mui/icons-material/Circle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CenteredTree() {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState('Retail'),\n      _useState2 = _slicedToArray(_useState, 2),\n      channel = _useState2[0],\n      setChannel = _useState2[1];\n\n  var channels = defaultArray.filter(function (item) {\n    return item.name === channel;\n  }); // const styleValues = channels[0].children.map(item => item.dealerType);\n  // console.log(\"valyesrrrr....\", channels[0].children.map(item => item.dealerType))\n  // function flatten(channels) {\n  //   return channels? channels[0].reduce((result, item) => [\n  //       ...result,\n  //       { name: item.name },\n  //       ...flatten(item.children)\n  //   ], []) : [];\n  // }\n\n  function flatten(defaultArray) {\n    return defaultArray ? defaultArray.reduce(function (result, item) {\n      return [].concat(_toConsumableArray(result), [{\n        name: item.name,\n        type: item.dealerType\n      }], _toConsumableArray(flatten(item.children)));\n    }, []) : [];\n  }\n\n  var valueFtn = flatten(defaultArray);\n  console.log(\"some\", valueFtn);\n  var debugData = [{\n    name: \"SALAM DMS\",\n    children: channels\n  }];\n  var containerStyles = {\n    width: \"100%\",\n    height: \"100vh\"\n  };\n  var svgSquare = {\n    shape: \"rect\",\n    shapeProps: {\n      width: 20,\n      height: 20,\n      x: -10,\n      y: -10\n    }\n  };\n\n  var handleChange = function handleChange(event) {\n    setChannel(event.target.value);\n  };\n\n  var _useState3 = useState({\n    x: 0,\n    y: 0\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      translate = _useState4[0],\n      setTranslate = _useState4[1];\n\n  var treeContainer = useRef(null);\n  useEffect(function () {\n    var dimensions = treeContainer.current.getBoundingClientRect();\n    setTranslate({\n      x: dimensions.width / 10,\n      y: dimensions.width / 3\n    });\n  }, []); // const straightPathFunc = (linkDatum, orientation) => {\n  //   const { source, target } = linkDatum;\n  //   console.log(\"source\", source);\n  //   console.log(\"target\", target);\n  //   console.log(\"linkDatum\", linkDatum);\n  // return orientation === 'horizontal'\n  //   ? `M${source.y},${source.x}L${target.y},${target.x}`\n  //   : `M${source.x},${source.y}L${target.x},${target.y}`;\n  // };\n\n  var color = function color(nodeDatum) {\n    console.log('nodeDatum', nodeDatum);\n    return nodeDatum.dealerType === \"pos_shop\" ? \"blue\" : nodeDatum.dealerType === \"distributor\" || nodeDatum.dealerType === \"sub_distributor\" ? \"yellow\" : \"black\";\n  };\n\n  var renderRectSvgNode = function renderRectSvgNode(_ref) {\n    var _nodeDatum$attributes, _nodeDatum$attributes2;\n\n    var nodeDatum = _ref.nodeDatum,\n        toggleNode = _ref.toggleNode;\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"5\",\n        cy: \"5\",\n        r: \"10\",\n        fill: color(nodeDatum)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(\"text\", {\n        fill: \"black\",\n        strokeWidth: \"1\",\n        x: \"20\",\n        style: {\n          lineBreak: \"loose\"\n        },\n        children: nodeDatum.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, _this), ((_nodeDatum$attributes = nodeDatum.attributes) === null || _nodeDatum$attributes === void 0 ? void 0 : _nodeDatum$attributes.department) && /*#__PURE__*/_jsxDEV(\"text\", {\n        fill: \"black\",\n        x: \"20\",\n        dy: \"20\",\n        strokeWidth: \"1\",\n        children: [\"Department: \", (_nodeDatum$attributes2 = nodeDatum.attributes) === null || _nodeDatum$attributes2 === void 0 ? void 0 : _nodeDatum$attributes2.department]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }, _this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: containerStyles,\n    ref: treeContainer,\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        maxWidth: 120\n      },\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          id: \"demo-simple-select-label\",\n          children: \"Select Channel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          labelId: \"demo-simple-select-label\",\n          id: \"demo-simple-select\",\n          value: channel,\n          label: \"Select Channel\",\n          onChange: handleChange,\n          children: defaultArray.map(function (item) {\n            return /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: item.name,\n              children: item.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 39\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), console.log(\"debugData\", debugData), /*#__PURE__*/_jsxDEV(Tree, {\n      data: debugData,\n      translate: translate,\n      orientation: \"vertical\",\n      nodeSvgShape: svgSquare,\n      rootNodeClassName: \"node__root\",\n      branchNodeClassName: \"node__branch\" //\n      ,\n      leafNodeClassName: \"node__leaf\",\n      circleRadius: 5 // pathFunc={straightPathFunc}\n      ,\n      renderCustomNodeElement: renderRectSvgNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n} // export default class CenteredTree extends React.PureComponent {\n//   state = {\n//   };\n//   componentDidMount() {\n//     const dimensions = this.treeContainer.getBoundingClientRect();\n//     this.setState({\n//       translate: {\n//         x: dimensions.width / 10,\n//         y: dimensions.width / 3\n//       }\n//     });\n//    }\n//   render() {\n//     {console.log(\"defaultArray\",defaultArray)}\n//     return (\n//       <div style={containerStyles} ref={(tc) => (this.treeContainer = tc)}>\n//         <Tree\n//           data={debugData}\n//           translate={this.state.translate}\n//           orientation={\"vertical\"}\n//           nodeSvgShape={svgSquare}\n//           circleRadius={5}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n_s(CenteredTree, \"36m23iRDJCR+B4P1vAIod8zwtcA=\");\n\n_c = CenteredTree;\n\nvar _c;\n\n$RefreshReg$(_c, \"CenteredTree\");","map":{"version":3,"sources":["/Users/ramzandeveloper/Desktop/Repos/OtherRepos/treeReactJs/reactD3/d3-tree-react-example/src/Tree.js"],"names":["React","useState","useEffect","useRef","Tree","axios","defaultArray","Box","InputLabel","MenuItem","FormControl","Select","CircleIcon","CenteredTree","channel","setChannel","channels","filter","item","name","flatten","reduce","result","type","dealerType","children","valueFtn","console","log","debugData","containerStyles","width","height","svgSquare","shape","shapeProps","x","y","handleChange","event","target","value","translate","setTranslate","treeContainer","dimensions","current","getBoundingClientRect","color","nodeDatum","renderRectSvgNode","toggleNode","lineBreak","attributes","department","maxWidth","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport Tree from \"react-d3-tree\";\r\nimport axios from \"axios\";\r\nimport defaultArray from './convertedArray';\r\nimport Box from '@mui/material/Box';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\nimport './custom-tree.css';\r\nimport CircleIcon from '@mui/icons-material/Circle';\r\nexport default function CenteredTree() {\r\n\r\n  const [channel, setChannel] = useState('Retail');\r\n\r\n  const channels = defaultArray.filter(item => item.name === channel)\r\n  // const styleValues = channels[0].children.map(item => item.dealerType);\r\n  // console.log(\"valyesrrrr....\", channels[0].children.map(item => item.dealerType))\r\n  // function flatten(channels) {\r\n  //   return channels? channels[0].reduce((result, item) => [\r\n  //       ...result,\r\n  //       { name: item.name },\r\n  //       ...flatten(item.children)\r\n  //   ], []) : [];\r\n  // }\r\n  function flatten(defaultArray) {\r\n    return defaultArray ? defaultArray.reduce((result, item) => [\r\n      ...result,\r\n      { name: item.name, type: item.dealerType },\r\n\r\n      ...flatten(item.children)\r\n    ], []) : [];\r\n  }\r\n  const valueFtn = flatten(defaultArray)\r\n  console.log(\"some\", valueFtn);\r\n  const debugData = [\r\n    {\r\n      name: \"SALAM DMS\",\r\n      children: channels\r\n    }\r\n\r\n  ];\r\n  const containerStyles = {\r\n    width: \"100%\",\r\n    height: \"100vh\"\r\n  };\r\n\r\n  const svgSquare = {\r\n    shape: \"rect\",\r\n    shapeProps: {\r\n      width: 20,\r\n      height: 20,\r\n      x: -10,\r\n      y: -10\r\n    }\r\n  };\r\n  const handleChange = (event) => {\r\n    setChannel(event.target.value);\r\n  };\r\n  const [translate, setTranslate] = useState({\r\n    x: 0,\r\n    y: 0\r\n  })\r\n  const treeContainer = useRef(null)\r\n  useEffect(() => {\r\n    const dimensions = treeContainer.current.getBoundingClientRect();\r\n    setTranslate({\r\n      x: dimensions.width / 10,\r\n      y: dimensions.width / 3\r\n    })\r\n  }, []);\r\n  // const straightPathFunc = (linkDatum, orientation) => {\r\n  //   const { source, target } = linkDatum;\r\n  //   console.log(\"source\", source);\r\n  //   console.log(\"target\", target);\r\n  //   console.log(\"linkDatum\", linkDatum);\r\n    // return orientation === 'horizontal'\r\n    //   ? `M${source.y},${source.x}L${target.y},${target.x}`\r\n    //   : `M${source.x},${source.y}L${target.x},${target.y}`;\r\n  // };\r\n  const color =(nodeDatum)=>{\r\n    console.log('nodeDatum', nodeDatum)\r\n    return nodeDatum.dealerType === \"pos_shop\" ?  \"blue\" : nodeDatum.dealerType === \"distributor\" || nodeDatum.dealerType === \"sub_distributor\" ? \"yellow\" : \"black\";\r\n     }\r\n  const renderRectSvgNode = ({ nodeDatum, toggleNode }) => (\r\n    <g>\r\n      <circle cx=\"5\" cy=\"5\" r=\"10\" fill={color(nodeDatum)}/>\r\n      <text fill=\"black\" strokeWidth=\"1\" x=\"20\" style={{lineBreak: \"loose\"}}>\r\n        {nodeDatum.name}\r\n      </text>\r\n      {nodeDatum.attributes?.department && (\r\n        <text fill=\"black\" x=\"20\" dy=\"20\" strokeWidth=\"1\">\r\n          Department: {nodeDatum.attributes?.department}\r\n        </text>\r\n      )}\r\n    </g>\r\n  );\r\n  return (\r\n\r\n    <div style={containerStyles} ref={treeContainer}>\r\n      <Box sx={{ maxWidth: 120 }}>\r\n        <FormControl fullWidth>\r\n          <InputLabel id=\"demo-simple-select-label\">Select Channel</InputLabel>\r\n          <Select\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            value={channel}\r\n            label=\"Select Channel\"\r\n            onChange={handleChange}\r\n          >\r\n\r\n            {defaultArray.map(item => <MenuItem value={item.name}>{item.name}</MenuItem>)}\r\n          </Select>\r\n        </FormControl>\r\n      </Box>\r\n      {console.log(\"debugData\", debugData)}\r\n      <Tree\r\n        data={debugData}\r\n        translate={translate}\r\n        orientation={\"vertical\"}\r\n        nodeSvgShape={svgSquare}\r\n        rootNodeClassName={\"node__root\"}\r\n        branchNodeClassName={\"node__branch\"}  //\r\n        leafNodeClassName=\"node__leaf\"\r\n        circleRadius={5}\r\n        // pathFunc={straightPathFunc}\r\n        renderCustomNodeElement={renderRectSvgNode}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n// export default class CenteredTree extends React.PureComponent {\r\n//   state = {\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     const dimensions = this.treeContainer.getBoundingClientRect();\r\n//     this.setState({\r\n//       translate: {\r\n//         x: dimensions.width / 10,\r\n//         y: dimensions.width / 3\r\n//       }\r\n//     });\r\n//    }\r\n//   render() {\r\n//     {console.log(\"defaultArray\",defaultArray)}\r\n//     return (\r\n//       <div style={containerStyles} ref={(tc) => (this.treeContainer = tc)}>\r\n//         <Tree\r\n//           data={debugData}\r\n//           translate={this.state.translate}\r\n//           orientation={\"vertical\"}\r\n//           nodeSvgShape={svgSquare}\r\n//           circleRadius={5}\r\n//         />\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}